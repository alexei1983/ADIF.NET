
namespace org.goodspace.Data.Radio.Adif
{
    /// <summary>
    /// ADIF constants.
    /// </summary>
    internal static class AdifConstants
    {
        /// <summary>
        /// ADIF date format.
        /// </summary>
        public const string DateFormat = "yyyyMMdd";

        /// <summary>
        /// Long ADIF time format.
        /// </summary>
        public const string TimeFormatLong = "HHmmss";

        /// <summary>
        /// Short ADIF time format.
        /// </summary>
        public const string TimeFormatShort = "HHmm";

        /// <summary>
        /// Character that represents the opening of an ADIF tag.
        /// </summary>
        public const char TagOpen = '<';

        /// <summary>
        /// Character that represents the closing of an ADIF tag.
        /// </summary>
        public const char TagClose = '>';

        /// <summary>
        /// Character that represents the start of a comment in an ADIF file.
        /// </summary>
        public const char CommentIndicator = '#';

        /// <summary>
        /// Newline character.
        /// </summary>
        public const char Newline = '\n';

        /// <summary>
        /// Carriage return character.
        /// </summary>
        public const char CarriageReturn = '\r';

        /// <summary>
        /// Ampersand character.
        /// </summary>
        public const char Ampersand = '&';

        /// <summary>
        /// Default character to delimit list items in ADIF.
        /// </summary>
        public const char ListDelimiter = Colon;

        /// <summary>
        /// Character that indicates the start of an ADIF tag length.
        /// </summary>
        public const char ValueLengthIndicator = Colon;

        /// <summary>
        /// Default character to delimit values in an ADIF list.
        /// </summary>
        public const char ValueSeparator = Comma;

        /// <summary>
        /// Comma character.
        /// </summary>
        public const char Comma = ',';

        /// <summary>
        /// Colon character.
        /// </summary>
        public const char Colon = ':';

        /// <summary>
        /// Semi-colon character.
        /// </summary>
        public const char Semicolon = ';';

        /// <summary>
        /// Opening curly brace character.
        /// </summary>
        public const char CurlyBraceOpen = '{';

        /// <summary>
        /// Closing curly brace character.
        /// </summary>
        public const char CurlyBraceClose = '}';

        /// <summary>
        /// Underscore character.
        /// </summary>
        public const char Underscore = '_';

        /// <summary>
        /// Default header text on the first line of an ADIF file.
        /// </summary>
        public const string DefaultHeaderText = "ADIF generated by " + AdifNet.ProgramId;

        /// <summary>
        /// String representing a true boolean value.
        /// </summary>
        public const string BooleanTrue = "Y";

        /// <summary>
        /// String representing a false boolean value.
        /// </summary>
        public const string BooleanFalse = "N";

        /// <summary>
        /// Display string for a true boolean value.
        /// </summary>
        public const string BooleanTrueDisplay = "Yes";

        /// <summary>
        /// Display string for a false boolean value.
        /// </summary>
        public const string BooleanFalseDisplay = "No";

        /// <summary>
        /// Regex used to match the ADIF SOTARef data type.
        /// </summary>
        public const string SotaRefRegex = @"[a-zA-Z0-9]{1,8}\/[a-zA-Z]{2}\-([0-9][0-9][1-9]|[0-9][1-9][0-9]|[1-9][0-9][0-9])";

        /// <summary>
        /// Regex used to match call signs.
        /// </summary>
        public const string CallSignRegex = @"^((\d|[A-Z])+\/)?((\d|[A-Z]){3,})(\/(\d|[A-Z])+)?(\/(\d|[A-Z])+)?$";
    }
}