using System.Reflection;

namespace org.goodspace.Data.Radio.Adif
{
    internal static class AdifNet
    {
        /// <summary>
        /// Program ID used in ADIF data generated by this library.
        /// </summary>
        public const string ProgramId = "ADIFNET";

        /// <summary>
        /// The current version of ADIF.NET
        /// </summary>
        public static readonly Version ProgramVersion;

        /// <summary>
        /// User configuration for ADIF.NET
        /// </summary>
        public static readonly AdifCustomConfiguration DefaultConfiguration;

        static readonly string[] DefaultConfigFileNames = ["adifnet.xml", "default.xml", "config.xml" ];

        /// <summary>
        /// Instantiates the static data fields for the class.
        /// </summary>
        static AdifNet()
        {
            var executingAssemblyName = Assembly.GetExecutingAssembly().GetName();

            var progVersion = executingAssemblyName.Version;

            if (progVersion == null)
            {
                var entryAssemblyName = Assembly.GetEntryAssembly()?.GetName();
                if (entryAssemblyName != null && entryAssemblyName.Equals(executingAssemblyName))
                    progVersion = entryAssemblyName.Version;
            }

            if (progVersion == null)
                progVersion = new(1, 0);

            ProgramVersion = progVersion;
            
            try
            {
                string[] initialPaths = [
                      Environment.GetFolderPath(Environment.SpecialFolder.System),
                      Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                      Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData),
                      Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                      Environment.CurrentDirectory
                      ];

                List<string> paths = [];

                foreach (var path in initialPaths)
                {
                    if (!string.IsNullOrEmpty(path))
                    {
                        if (!Path.IsPathRooted(path))
                        {
                            var _path = Path.GetFullPath(path);
                            if (!string.IsNullOrEmpty(_path))
                                paths.Add(_path);
                        }
                        else
                            paths.Add(path);
                    }
                }

                var configMgr = new AdifCustomConfigurationManager();

                foreach (var p in paths)
                {
                    foreach (var filename in DefaultConfigFileNames)
                    {
                        var path = Path.Combine(p, filename);
                        if (new FileInfo(path).Exists)
                        {
                            try
                            {
                                configMgr.LoadFile(path);
                                DefaultConfiguration = configMgr.Parse();
                                if (DefaultConfiguration != null)
                                    break;
                            }
                            catch
                            {
                                continue;
                            }
                        }
                    }

                    if (DefaultConfiguration != null)
                        break;
                }

                if (DefaultConfiguration == null)
                    throw new Exception("No default configuration file found.");
            }
            catch
            {
                DefaultConfiguration = new AdifCustomConfiguration() { EmitFlags = EmitFlags.None };
            }
        }
    }
}
